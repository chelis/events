        import React from 'react';
        import ReactDOM from 'react-dom';
        import $ from 'jquery';

        import EventList from "./event-list"
        import EventForm from "./event-form"


        var EventBox = React.createClass({
         getInitialState: function() {
            return {data: []};
          }, 
        
        loadEventsFromServer: function() {
          $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
              this.setState({data: data.results});
            }.bind(this),
            error: function(xhr, status, err) {
              console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
          },      
          handleEventSubmit: function(event) {
                  var events = this.state.data;
                  // Optimistically set an id on the new Event. It will be replaced by an
                  // id generated by the server. In a production application you would likely
                  // not use Date.now() for this and would have a more robust system in place.
                  event.id = Date.now();
                  var newEvents = events.concat([event]);
                  console.log(event)
                  this.setState({data: newEvents});            
                  $.ajax({
                    url: this.props.url,
                    dataType: 'json',
                    type: 'POST',
                    data: event,
                    success: function(data) {
                      this.setState({data: data});
                    }.bind(this),
                    error: function(xhr, status, err) {
                       this.setState({data: events});
                      console.error(this.props.url, status, err.toString());
                    }.bind(this)
                  });
          },                       
          handleEventDelete: function(id) {
                  var events = this.state.data;
                  var newEvents = this.state.data.filter(function(el){ return el.id != id; });
                  this.setState({data: newEvents});
                  $.ajax({
                    url: this.props.deleteUrl+"/" + id,
                    dataType: 'json',
                    type: 'POST',
                    success: function(data) {
                      this.setState({data: data});
                    }.bind(this),
                    error: function(xhr, status, err) {
                       this.setState({data: events});
                      console.error(this.props.deleteUrl, status, err.toString());
                    }.bind(this)
                  });
          },          
          handleEventEdit: function(obj) {
                  var editEvent = obj.id
                  var editEventId = editEvent;
                  // this.setState({data: newEvents});
                  $.ajax({
                    url: this.props.editUrl+"/" + editEventId,
                    dataType: 'json',
                    type: 'PATCH', 
                    data: obj,
                    success: function(data) {
                      this.setState({data: data});
                    }.bind(this),
                    error: function(xhr, status, err) {
                       // this.setState({data: events});
                      console.error(this.props.editUrl, status, err.toString());
                    }.bind(this)
                  });
          },          

          render: function() {
            return (
              <div className="EventBox">
                      <h1>Seguimiento</h1>
                      <EventForm onEventSubmit={this.handleEventSubmit} event_types={this.props.event_types} onEventEdit={this.handleEventEdit}/>
                      <br/>
                      <EventList data={this.state.data} event_types={this.props.event_types} onEventDelete={this.handleEventDelete}  />
              </div>
            );
          },
        componentDidMount: function() {
          this.loadEventsFromServer();
          setInterval(this.loadEventsFromServer, this.props.pollInterval);
        },          
    });

export default EventBox
